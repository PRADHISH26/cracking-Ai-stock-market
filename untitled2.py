# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P656DRsm2sppYEZSSw8wNsCdbMd1z60x

## Data loading

### Subtask:
Load the stock data from the "stock_data.csv" file into a pandas DataFrame.

**Reasoning**:
Load the stock data from the provided CSV file into a pandas DataFrame and display the first few rows along with its shape.
"""

import pandas as pd

try:
    df = pd.read_csv('stock_data.csv')
    display(df.head())
    print(df.shape)
except FileNotFoundError:
    print("Error: 'stock_data.csv' not found.")
except pd.errors.ParserError:
    print("Error: Could not parse the CSV file. Please check the file format and delimiter.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""## Data exploration

### Subtask:
Explore the loaded stock data to understand its characteristics.

**Reasoning**:
Examine the data types, check for missing values, calculate descriptive statistics, and visualize the distributions of stock prices.
"""

# 1. Examine data types and convert date column
print(df.dtypes)
df['Date'] = pd.to_datetime(df['Date'])

# 2. Check for missing values
missing_values = df.isnull().sum()
missing_percentage = (missing_values / len(df)) * 100
print("\nMissing Values:\n", missing_values)
print("\nMissing Value Percentage:\n", missing_percentage)

# 3. Descriptive statistics for numerical columns
numerical_cols = ['AMZN', 'DPZ', 'BTC', 'NFLX']
descriptive_stats = df[numerical_cols].describe()
print("\nDescriptive Statistics:\n", descriptive_stats)


# 4. Visualize distributions of stock prices
import matplotlib.pyplot as plt

plt.figure(figsize=(16, 8))
for i, col in enumerate(numerical_cols):
    plt.subplot(2, 2, i + 1)
    plt.hist(df[col], bins=20, color='skyblue', edgecolor='black')
    plt.title(f'Distribution of {col} Stock Price')
    plt.xlabel(col)
    plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# 5. Analyze and visualize correlations between stock prices
correlation_matrix = df[numerical_cols].corr()
print("\nCorrelation Matrix:\n", correlation_matrix)

plt.figure(figsize=(8, 6))
plt.imshow(correlation_matrix, cmap='viridis', interpolation='nearest')
plt.colorbar()
plt.xticks(range(len(numerical_cols)), numerical_cols, rotation=45)
plt.yticks(range(len(numerical_cols)), numerical_cols)
plt.title('Correlation Heatmap of Stock Prices')
plt.show()

# 6. Determine overall time range
print("\nTime Range:", df['Date'].min(), "to", df['Date'].max())

"""## Data cleaning

### Subtask:
Data Cleaning

**Reasoning**:
Impute missing values (if any), detect and handle outliers in stock price columns, and verify the data cleaning.
"""

# Check for missing values again (though the previous exploration didn't find any)
missing_values_after_cleaning = df.isnull().sum()
print("Missing values after cleaning:\n", missing_values_after_cleaning)

# No imputation needed as per the previous exploration step, which showed no missing values.

# Outlier handling: Winsorizing
def winsorize_outliers(series, limits=(0.05, 0.95)):
    lower_limit = series.quantile(limits[0])
    upper_limit = series.quantile(limits[1])
    return series.clip(lower=lower_limit, upper=upper_limit)

for col in ['AMZN', 'DPZ', 'BTC', 'NFLX']:
    df[col] = winsorize_outliers(df[col])

# Verify no missing values post-outlier handling
missing_values_after_outlier_handling = df.isnull().sum()
print("\nMissing values after outlier handling:\n", missing_values_after_outlier_handling)

"""## Feature engineering

### Subtask:
Create new features from existing ones in the stock data.

**Reasoning**:
Calculate moving averages and percentage changes for each stock price.
"""

# Calculate moving averages
df['AMZN_MA7'] = df['AMZN'].rolling(window=7).mean()
df['AMZN_MA30'] = df['AMZN'].rolling(window=30).mean()
df['DPZ_MA7'] = df['DPZ'].rolling(window=7).mean()
df['DPZ_MA30'] = df['DPZ'].rolling(window=30).mean()
df['BTC_MA7'] = df['BTC'].rolling(window=7).mean()
df['BTC_MA30'] = df['BTC'].rolling(window=30).mean()
df['NFLX_MA7'] = df['NFLX'].rolling(window=7).mean()
df['NFLX_MA30'] = df['NFLX'].rolling(window=30).mean()

# Calculate percentage change
df['AMZN_pct_change'] = df['AMZN'].pct_change()
df['DPZ_pct_change'] = df['DPZ'].pct_change()
df['BTC_pct_change'] = df['BTC'].pct_change()
df['NFLX_pct_change'] = df['NFLX'].pct_change()

# Fill NaN values with 0 (a simple imputation method)
df.fillna(0, inplace=True)

display(df.head(10))

"""## Data analysis

### Subtask:
Analyze the engineered features and their relationships with stock prices.

**Reasoning**:
Calculate descriptive statistics for the engineered features and investigate the correlation between original stock prices and engineered features. Visualize the correlation matrix as a heatmap.
"""

# Calculate descriptive statistics for engineered features
engineered_features = ['AMZN_MA7', 'AMZN_MA30', 'DPZ_MA7', 'DPZ_MA30', 'BTC_MA7', 'BTC_MA30', 'NFLX_MA7', 'NFLX_MA30', 'AMZN_pct_change', 'DPZ_pct_change', 'BTC_pct_change', 'NFLX_pct_change']
descriptive_stats_engineered = df[engineered_features].describe()
print("Descriptive Statistics for Engineered Features:\n", descriptive_stats_engineered)

# Investigate the correlation between original stock prices and engineered features
correlation_matrix_all = df.corr()

import matplotlib.pyplot as plt
plt.figure(figsize=(12, 10))
plt.imshow(correlation_matrix_all, cmap='coolwarm', interpolation='nearest')
plt.colorbar(label='Correlation Coefficient')
plt.xticks(range(len(df.columns)), df.columns, rotation=90)
plt.yticks(range(len(df.columns)), df.columns)
plt.title('Correlation Matrix Heatmap (All Features)')
plt.tight_layout()
plt.show()

"""**Reasoning**:
Explore potential relationships between different stocks' prices and the newly generated features using scatter plots.


"""

import matplotlib.pyplot as plt

# Example: Percentage change in AMZN vs. moving average of NFLX
plt.figure(figsize=(8, 6))
plt.scatter(df['AMZN_pct_change'], df['NFLX_MA30'], alpha=0.5, color='green')  # Adjust alpha for visibility
plt.xlabel('AMZN Percentage Change')
plt.ylabel('NFLX 30-Day Moving Average')
plt.title('Relationship between AMZN Pct Change and NFLX MA30')
plt.show()

# Example: Percentage change in BTC vs. moving average of DPZ
plt.figure(figsize=(8, 6))
plt.scatter(df['BTC_pct_change'], df['DPZ_MA7'], alpha=0.5, color='purple')  # Adjust alpha for visibility
plt.xlabel('BTC Percentage Change')
plt.ylabel('DPZ 7-Day Moving Average')
plt.title('Relationship between BTC Pct Change and DPZ MA7')
plt.show()


# Add more scatter plots to explore other relationships as needed.

"""## Data visualization

### Subtask:
Create visualizations to represent key findings from the data analysis.

**Reasoning**:
Generate the visualizations as per the instructions, combining multiple plots into a single figure where appropriate.
"""

import matplotlib.pyplot as plt
import numpy as np

# 1. Time Series Plots with Moving Averages
plt.figure(figsize=(16, 12))
for i, stock in enumerate(['AMZN', 'DPZ', 'BTC', 'NFLX']):
    plt.subplot(2, 2, i + 1)
    plt.plot(df['Date'], df[stock], label=stock, color='blue')
    plt.plot(df['Date'], df[f'{stock}_MA7'], label=f'{stock} 7-Day MA', color='orange')
    plt.plot(df['Date'], df[f'{stock}_MA30'], label=f'{stock} 30-Day MA', color='green')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(f'{stock} Price with Moving Averages')
    plt.legend()
plt.tight_layout()
plt.show()

# 2. Histograms of Percentage Changes
plt.figure(figsize=(12, 6))
for i, stock in enumerate(['AMZN', 'DPZ', 'BTC', 'NFLX']):
    plt.hist(df[f'{stock}_pct_change'], bins=30, alpha=0.7, label=stock, color=['skyblue', 'salmon', 'lightgreen', 'plum'][i])
plt.xlabel('Percentage Change')
plt.ylabel('Frequency')
plt.title('Histograms of Daily Percentage Changes')
plt.legend()
plt.show()

# 3. Enhanced Scatter Plots with Regression Lines
from scipy.stats import linregress

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
slope, intercept, r_value, p_value, std_err = linregress(df['AMZN_pct_change'], df['NFLX_MA30'])
plt.scatter(df['AMZN_pct_change'], df['NFLX_MA30'], alpha=0.5, c=df.index, cmap='viridis') #color gradient based on date index
plt.plot(df['AMZN_pct_change'], intercept + slope * df['AMZN_pct_change'], 'r', label=f"Regression Line (r={r_value:.2f})")
plt.xlabel('AMZN Percentage Change')
plt.ylabel('NFLX 30-Day MA')
plt.title('AMZN Pct Change vs. NFLX MA30')
plt.colorbar(label="Date Index")
plt.legend()


plt.subplot(1, 2, 2)
slope, intercept, r_value, p_value, std_err = linregress(df['BTC_pct_change'], df['DPZ_MA7'])
plt.scatter(df['BTC_pct_change'], df['DPZ_MA7'], alpha=0.5, c=df.index, cmap='viridis') #color gradient based on date index
plt.plot(df['BTC_pct_change'], intercept + slope * df['BTC_pct_change'], 'r', label=f"Regression Line (r={r_value:.2f})")
plt.xlabel('BTC Percentage Change')
plt.ylabel('DPZ 7-Day MA')
plt.title('BTC Pct Change vs. DPZ MA7')
plt.colorbar(label="Date Index")
plt.legend()

plt.tight_layout()
plt.show()


# 4. Combined Plot
plt.figure(figsize=(18, 6))

plt.subplot(1, 3, 1)
plt.plot(df['Date'], df['AMZN'], label='AMZN', color='blue')
plt.plot(df['Date'], df['AMZN_MA7'], label='AMZN 7-Day MA', color='orange')
plt.plot(df['Date'], df['AMZN_MA30'], label='AMZN 30-Day MA', color='green')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title('AMZN Price with Moving Averages')
plt.legend()


plt.subplot(1, 3, 2)
plt.hist(df['BTC_pct_change'], bins=30, alpha=0.7, label='BTC', color='skyblue')
plt.xlabel('Percentage Change')
plt.ylabel('Frequency')
plt.title('BTC Daily Percentage Changes')
plt.legend()


plt.subplot(1, 3, 3)
plt.scatter(df['AMZN_pct_change'], df['NFLX_MA30'], alpha=0.5, color='green')
plt.xlabel('AMZN Percentage Change')
plt.ylabel('NFLX 30-Day Moving Average')
plt.title('AMZN Pct Change vs. NFLX MA30')

plt.tight_layout()
plt.show()

"""## Summary:

### Q&A

There are no explicit questions in the provided data analysis task and solution.  However, the analysis implicitly addresses questions like:

* What are the key statistical properties of the stock prices?
* Are there any missing values or outliers in the data?
* How are the stock prices correlated with each other?
* How do moving averages and percentage changes relate to the original stock prices?
* Are there any noticeable trends or patterns in the stock data over time?


### Data Analysis Key Findings

* **No Missing Values:** The dataset contained no missing values, even after outlier handling.
* **Strong Positive Correlations between Stocks:** Stock prices, particularly AMZN and NFLX, and AMZN and DPZ showed strong positive correlations.
* **Time Range:** The data spans from 2013-05-01 to 2019-05-14.
* **Moving Average Calculations:** 7-day and 30-day moving averages were calculated for each stock, showing trends in price changes over time.
* **Percentage Change Calculation:** Daily percentage changes were calculated and used in visualizing short-term price fluctuations.
* **Outlier Handling with Winsorizing:** Outliers were handled using Winsorizing, which replaced values outside the 5th and 95th percentiles with the corresponding percentile values, ensuring more robust analyses.
* **Correlation between Original and Engineered Features:** A correlation matrix and heatmap analysis were performed, revealing the relationships between original stock prices and engineered features (moving averages and percentage changes).  While the specific numerical values are not presented in the summary, the heatmap provides a visual representation of these relationships.
* **Cross-stock Relationships:** Scatter plots visualizing the relationship between percentage changes in one stock and moving averages in another were generated.  For example, the relationship between AMZN's percentage change and NFLX's 30-day moving average and between BTC's percentage change and DPZ's 7-day moving average were explored.  Visualizations included regression lines and a color gradient (based on date index) to highlight temporal trends.


### Insights or Next Steps

* **Further Correlation Analysis:** Quantify the correlations between stock prices and engineered features using numerical correlation coefficients.
* **Time Series Modeling:**  Explore time series modeling techniques (e.g., ARIMA, Prophet) to forecast future stock prices based on the generated features and identify potential predictive patterns.

"""